// SPDX-License-Identifier: Unlicensed
pragma solidity 0.8.18;

contract DemoContract {
    
    address public owner;

    struct Receivers {
        string name;
        uint256 tokens;
    }

    mapping(address => Receivers) public users;

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    constructor() {
        owner = msg.sender;
        users[owner].tokens = 100; // Initial token supply to the owner
    }

    function double(uint _value) public pure returns (uint) {
        return _value * 2;
    }

    function register(string memory _name) public {
        users[msg.sender].name = _name;
    }
function giveToken(address _receiver, uint256 _amount) public onlyOwner {
        require(users[owner].tokens >= _amount, "Not enough tokens");
        users[owner].tokens -= _amount;
        users[_receiver].tokens += _amount;
    }

    // New function: Buy tokens by sending Ether
    function buyToken() public payable {
        require(msg.value >= 2 ether, "Minimum purchase: 1 token (2 Ether)");

        uint256 tokensToBuy = msg.value / 2 ether;

        require(users[owner].tokens >= tokensToBuy, "Owner has insufficient tokens");

        users[owner].tokens -= tokensToBuy;
        users[msg.sender].tokens += tokensToBuy;
    }

    // To check total Ether balance stored in the contract
    function getContractBalance() public view returns (uint) {
        return address(this).balance;
        }
}
