// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.5.0 <0.8.0; 

// Exercise 1 - Create an empty contract with the name Factory with Solidity version >=0.5.0 and 0.8.0.
contract Factory {

    // Exercise 2 - Declare a uint named idDigits, and set it equal to 16
    uint idDigit = 16; 

    // Exercise 3 - Create a uint named idModulus, and set it equal to 10 to the power of idDigits. 
    uint idModulus = 10**idDigit; // 10^16

    // Exercise 4 - Create a struct named Product with with 2 Properties name (a string), and id (a uint).
    struct Product { 
    string name;
    uint id;        
    }

    // Exercise 5 - Create a public array of Product structs, and name it products. 
    Product[] public products;

    // Exercise 10 - Ownership mappings
    mapping(uint => address) public productToOwner;
    mapping(address => uint) public ownerProductCount;

    // Exercise 9 - Declare the NewProduct event
    event NewProduct(uint ArrayProductId, string name, uint id);
    
    // Exercise 6 - Create a private function named createProduct with 2 parameters: _name (a string), and _id (a uint).
    function _createProduct(string memory _name, uint _id) private {
    
    // Add the new product and get its index
    products.push(Product(_name, _id));
    uint productId = products.length - 1;

    // Assign ownership of the product to the caller
    productToOwner[productId] = msg.sender;

    // Increase owner's product count
    ownerProductCount[msg.sender]++;

    // Emit the NewProduct event
    emit NewProduct(productId, _name, _id);
    }

    // Exercise 7 - Create a private function called _generateRandomId with one parameter named _str (a string), and return a uint.
    // Exercise 8 (a) - Filling the body of _generateRandomId function.
    function _generateRandomId(string memory _str) private view returns (uint) {
    uint rand = uint(keccak256(abi.encodePacked(_str)));
    return rand % idModulus;
    }

    // Exercise 8 (b) - Public function to create a product with a random ID
    function createRandomProduct(string memory _name) public {
    uint randId = _generateRandomId(_name);
    _createProduct(_name, randId);
    }

    // Exercise 11 - Assign ownership manually to caller
    function Ownership(uint productId) public {
        productToOwner[productId] = msg.sender;
        ownerProductCount[msg.sender]++;
    }

    // Exercise 12 - Get all product IDs owned by a specific address
    function getProductsByOwner(address _owner) external view returns (uint[] memory) {
        uint counter = 0;
        uint[] memory result = new uint[](ownerProductCount[_owner]);

        for (uint i = 0; i < products.length; i++) 
        {
            if (productToOwner[i] == _owner) 
            {
                result[counter] = i;
                counter++;
            }
        }
        return result;
    }

    // Exercise 14 (a) - Modifier to check if user is older than a given age
    mapping (uint => uint) public age;  // userID -> age
    modifier olderThan(uint _age, uint _userId) {
    require(age[_userId] >= _age, "User is not old enough");
    _;
    }

    // Exercise 14 (b) - Function using the modifier
    function validationUsers(uint _userId) public view olderThan(18, _userId) {
    // Leave body blank as per instructions
    }
}
